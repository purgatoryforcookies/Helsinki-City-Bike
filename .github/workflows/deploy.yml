name: Build/Deploy

on:
  push:
    branches: [master]



jobs:
  deploy:
      # if: github.ref == 'refs/heads/master'
      name: Deploy to AWS EC2

      env:
          POSTGRE_HOST: ${{ secrets.POSTGRE_HOST }}
          POSTGRE_USER: ${{ secrets.POSTGRE_USER }}
          POSTGRE_PASS: ${{ secrets.POSTGRE_PASS }}
      runs-on: ubuntu-20.04
      steps:


        - name: Checkout repo
          uses: actions/checkout@v2
        - name: Setup node
          uses: actions/setup-node@v2
        
        - name: Intall dependecies
          working-directory: ./front
          run: npm install

        - name: Build
          working-directory: ./front
          run: npm run build

        
        - name: Copy backend files to EC2
          uses: easingthemes/ssh-deploy@main
          env:
              SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH }}
              REMOTE_HOST: ${{ secrets.EC2_DOMAIN }}
              REMOTE_USER: ${{ secrets.EC2_USERNAME }}
              SOURCE: "back/"
              TARGET: "/home/ubuntu/soldev"


        - name: Copy front build files to EC2
          uses: easingthemes/ssh-deploy@main
          env:
              SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH }}
              REMOTE_HOST: ${{ secrets.EC2_DOMAIN }}
              REMOTE_USER: ${{ secrets.EC2_USERNAME }}
              SOURCE: "front/build"
              TARGET: "/home/ubuntu/soldev/nginx/"



        - name: Run container in EC2 with SSH
          uses: appleboy/ssh-action@master
          with:
            key: ${{ secrets.EC2_SSH }}
            host: ${{ secrets.EC2_DOMAIN }}
            username: ${{ secrets.EC2_USERNAME }}
            envs: POSTGRE_HOST, POSTGRE_USER, POSTRGE_PASS
            script: |
              export POSTGRE_HOST=${{ secrets.POSTGRE_HOST }}
              export POSTGRE_USER=${{ secrets.POSTGRE_USER }}
              export POSTGRE_PASS=${{ secrets.POSTGRE_PASS }}
              export ENV=prod
              cd /home/ubuntu/soldev
              sudo -E docker-compose -f docker-compose.prod.yml down
              sudo -E docker-compose -f docker-compose.prod.yml build
              sudo -E docker-compose -f docker-compose.prod.yml up -d
              exit




        